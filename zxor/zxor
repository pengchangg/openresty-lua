#!/usr/bin/env lua

--项目名称
local myorname = 'zxor'
--默认操作
local action = 'help'

--获取命令行输入参数
--myor [action] <project> <argument...>
--<argument> ==
local nargs = {}
do 	--check arg
	local i = 1
	while arg[i] do
		if arg[i]:sub(1,1) == '-' then
			if arg[i]:sub(2) == 'docker' then
				nargs.docker = true
			elseif arg[i]:sub(2) == 'withcore' then
				nargs.withcore = true
			else
				nargs[arg[i]:sub(2)] = arg[i + 1]
				i = i + 1
			end
		else
			if not nargs.action then
				nargs.action = arg[i]
			elseif not nargs.workpath then
				nargs.workpath = arg[i]
			end
		end
		i = i + 1
	end

	arg[1] = nargs.action		--操作命令
	arg[2] = nargs.workpath		--项目路径
	arg[3] = nargs.tp			--nginx工作路径
	arg[4] = nargs.lp			--日志路径
	arg[5] = nargs.cp			--nginx配置保存路径
	arg[6] = nargs.ll			--日志等级
	arg[7] = nargs.cf			--nginx配置文件名
	arg[8] = nargs.docker		--在docker中运行
	arg[9] = nargs.daemon		--在前台运行
	arg[10] = nargs.withcore	--创建项目时复制zxor到项目目录

	action = arg[1] or action
end

--获取当前脚本所在路径
do 	--get myor path
	local excute_cmd = function(cmd)
		local t = io.popen(cmd)
		local data = t:read("*all")
		t:close()
		return data
	end

	local find_last = function(s,pattern)
		local rs = s:reverse()
		local pos = rs:find(pattern)
		if not pos then return #s end
		return #s - pos + 1
	end

	local get_myor_path = function()
		local orpath = arg[0]
		local ls = excute_cmd('ls -l ' .. orpath)
		local lnk = ls:find('->')
		if lnk then
			orpath = ls:sub(lnk + 1,find_last(ls,'/') - 1)
			orpath = orpath:sub(orpath:find('/'), #orpath)
		else
			orpath = orpath:sub(1,find_last(orpath,'/') - 1)
		end

		return orpath
	end

	local myorpath = get_myor_path()
	--设置luapath环境
	if myorpath then
		package.cpath = package.cpath .. ';' .. myorpath .. "/?.so;"
		package.path  = package.path .. ';' .. myorpath .. "/?.lua;"
	end
end

--获取环境变量
local env = require 'utils.env'
--nginx config 模板
local ngx_tpl = require 'utils.ngx_tpl'
--配置整合
local merge_conf = require 'utils.merge_conf'
--默认配置
local config = require 'utils.conf.default'

--整理环境变量
local myor = env.workpath .. '/' .. env.project
env.tmppath = arg[3] or 'nginx'
env.logpath = arg[4] or 'logs'
env.confpath = arg[5] or 'conf'
env.loglevel = arg[6] or 'info'
env.conffile = arg[7] or ('/nginx_' .. env.project .. '.conf')
env.indocker = arg[8]
env.daemon = arg[9]

if env.tmppath:sub(1,1) ~= '/' then
	env.tmppath = env.workpath .. '/' .. env.tmppath
end
if env.logpath:sub(1,1) ~= '/' then
	env.logpath = env.tmppath .. '/' .. env.logpath
end
if env.confpath:sub(1,1) ~= '/' then
	env.confpath = env.tmppath .. '/' .. env.confpath
end

--打印输出
local console = function(...)
	print(...)
end

--设置luapath环境
package.path  = package.path .. env.workpath .. "/?.lua;" .. env.workpath .. "/?/init.lua;"
package.cpath  = package.cpath .. env.workpath .. "/?.so;" .. env.workpath .. "/?/init.so;"
package.path  = package.path .. env.myorlualib .. "/?.lua;" .. env.myorlualib .. "/?/init.lua;"
package.cpath  = package.cpath .. env.myorlualib .. "/?.so;" .. env.myorlualib .. "/?/init.so;"
package.path  = package.path .. env.orlualib .. "/?.lua;"
package.cpath  = package.cpath .. env.orlualib .. "/?.so;"

--基本信息输出
local log_base_info = function()
	console('')
	console('do action = ' .. action)
	console(os.date("%Y-%m-%d %H:%M:%S", os.time()))
	console('-----------------------------------------------------------------------')
	console('PROJECTNAME = ' .. env.project)
	console('WORKPATH    = ' .. env.workpath)
	console('TMPPATH     = ' .. env.tmppath)
	console('LOGPATH     = ' .. env.logpath)
	console('CONFPATH    = ' .. env.confpath)
	console('LOGLEVEL    = ' .. env.loglevel)
	console('OPENRESTY   = ' .. env.orlualib)
	console('-----------------------------------------------------------------------')
end

--获取start命令行
local get_start_cmd = function()
	env.link(env.openresty,myor,true)
	return myor .. ' -p ' .. env.tmppath .. ' -c ' .. env.confpath .. '/nginx_' .. env.project .. '.conf'
end

--启动服务
local start = function()
	env.link(env.openresty,myor,true)
	local start_cmd = 'exec ' .. myor .. ' -p ' .. env.tmppath .. ' -c ' .. env.confpath .. '/nginx_' .. env.project .. '.conf'
	console('Start Service ' .. env.project .. ' ...')
	env.execute(start_cmd)
end

--停止服务
local stop = function(force)
	env.link(env.openresty,myor)
	local signal = 'quit'
	if force then
		signal = 'stop'
	end
	local stop_cmd = myor .. ' -s ' .. signal .. ' -p ' .. env.tmppath .. ' -c ' .. env.confpath .. '/nginx_' .. env.project .. '.conf'
	console('Stop Service ' .. env.project .. ' ...')
	env.execute(stop_cmd)

	local rm_exe = 'test -f ' .. myor .. '&& rm ' .. myor
	env.execute(rm_exe)
end

--重载服务
local reload = function()
	env.link(env.openresty,myor)
	local reload_cmd = myor .. ' -s reload -p ' .. env.tmppath .. ' -c ' .. env.confpath .. '/nginx_' .. env.project .. '.conf'
	console('Reload Service ' .. env.project .. ' ...')
	env.execute(reload_cmd)
end

local relogs = function()
	local backupfolder = env.logpath .. '/backup'
	local curtime = os.time()
	local curhour = (math.floor(curtime / 3600) + 8) % 24
	if curhour > 6 then curtime = curtime + 86400 end

	local backuppath = backupfolder .. '/' .. os.date("%Y%m%d",curtime) .. '/'

	local hms = os.date("%y-%m-%d_%H:%M:%S",os.time())
	console('check backup folder ... ')
	env.execute('mkdir ' .. backupfolder)
	env.execute('mkdir ' .. backuppath)
	console('backup to ' .. backuppath)

	local cmd_mv_accesslog = 'mv ' .. env.logpath .. '/access_' .. env.project .. '.log ' .. backuppath .. '/access_' .. env.project .. '_' .. hms .. '.log '
	console(cmd_mv_accesslog)
	env.execute(cmd_mv_accesslog)

	local cmd_mv_errorlog = 'mv ' .. env.logpath .. '/error_' .. env.project .. '.log ' .. backuppath .. '/error_' .. env.project .. '_' .. hms .. '.log '
	console(cmd_mv_errorlog)
	env.execute(cmd_mv_errorlog)

	console('backup finished.')
end

local _M = {}
function _M.help()
    local helpstr = [[
Usage: myor [action] <project> <argument...>

[action]
  help:       show this message, then exit
  version:    print the version of myor
  create:     create a new project in the current directory
  init:       initialize the local nginx.conf
  start:      start the myor server
  stop:       stop the myor server
  quit:       quit the myor server
  restart:    restart the myor server
  reload:     reload the myor server
  relogs:      backup logs
  doc:        show core api document

<project>     the project path,default is current path if there is no value.

<argument...>
  -lp:        log path
  -cp:        nginx config save path
  -tp:        tmp path
  -ll:        log level
]]

	console(helpstr:gsub('myor',myorname))

end

_M.version = function()
	local ver = 0.1
	console('version : ' .. ver)
end

--创建开发项目
_M.create = function()

	local app_lua_path = env.myorpath .. '/utils/conf/app.lua'
	local config_lua_path = env.myorpath .. '/utils/conf/config.lua'
	local dockerfile_path = env.myorpath .. '/Dockerfile'
	local zxor_folder = env.myorpath

	env.check_path_and_mkdir(env.workpath .. '/route')
	env.check_path_and_mkdir(env.workpath .. '/data')
	env.check_path_and_mkdir(env.workpath .. '/utils')

	if not env.exist(env.workpath .. '/app.lua') then
		env.copy_file(app_lua_path, env.workpath)
	end

	if not env.exist(env.workpath .. '/config.lua') then
		env.copy_file(config_lua_path, env.workpath)
	end

	if not env.exist(env.workpath .. '/Dockerfile') then
		env.copy_file(dockerfile_path, env.workpath)
	end

	if nargs.withcore then
		env.check_path_and_mkdir(env.workpath .. '/zxor')
		env.execute("cp -rf " .. zxor_folder .. "/* " .. env.workpath .. "/zxor/")
	end

	merge_conf()
	_M.init()
end

--初始化nginx环境
_M.init = function()
	env.check_path_and_mkdir(env.tmppath)
	env.check_path_and_mkdir(env.logpath)
	env.check_path_and_mkdir(env.confpath)

	--nginx default directory
	env.check_path_and_mkdir(env.tmppath .. '/logs')

	env.copy_file(env.myorpath .. '/utils/conf/mime.types', env.confpath)
	local ngxconf = ngx_tpl.make(config)
	local ok,err = env.write(env.confpath .. '/' .. env.conffile,ngxconf)
	if not ok then
		console(err)
	end
end

--启动服务
_M.start = function()
	if env.isrun then
		console('The ' .. env.project .. ' service is running.')
	else
		start()
	end
end

--停止服务
_M.stop = function()
	if not env.isrun then
		console('The ' .. env.project .. ' service is not running.')
	else
		stop(true)
	end
end

--退出服务
_M.quit = function ()
	if not env.isrun then
		console('The ' .. env.project .. ' service is not running.')
	else
		stop(false)
	end
end

--重启服务
_M.restart_old = function()
	if env.isrun then
		stop(true)
	end

	start()
end

--重新加载脚本
_M.reload = function()
	local fp = io.open(env.confpath .. '/nginx_' .. env.project .. '.conf','r')
	if fp then
		console('relogs begin...')
		local line = fp:read('*l')
		local logpath = false
		while line do
			logpath,_ = string.match(line,'error_log (.*)/(.*)%.log.*;')
			if logpath then break end
			line = fp:read('*l')
		end

		fp:close()
		console('get logpath = ' .. logpath)
		if logpath then
			local tmp = env.logpath
			env.logpath = logpath
			relogs()
			env.logpath = tmp
		end
	end

	if env.isrun then
		reload()
	else
		start()
	end
end

_M.restart = _M.reload

_M.relogs = function()
	local fp = io.open(env.confpath .. '/nginx_' .. env.project .. '.conf','r')
	if fp then
		console('relogs begin...')
		local line = fp:read('*l')
		local logpath = false
		while line do
			logpath,_ = string.match(line,'error_log (.*)/(.*)%.log.*;')
			if logpath then break end
			line = fp:read('*l')
		end

		fp:close()
		console('get logpath = ' .. logpath)
		if logpath then
			local tmp = env.logpath
			env.logpath = logpath
			relogs()
			env.logpath = tmp
		end
	end

	if env.isrun then
		env.link(env.openresty,myor)
		local reload_cmd = myor .. ' -s reopen -p ' .. env.tmppath .. ' -c ' .. env.confpath .. '/nginx_' .. env.project .. '.conf'
		console('Relogs Service ' .. env.project .. ' ...')
		env.execute(reload_cmd)
	end
end

_M.get_start_cmd = function()
	print(get_start_cmd())
end

if not _M[action] then
    print("invalid argument: ", action, "\n")
else
	if action ~= 'help' and action ~= 'version' and action ~= 'create' then
		if not merge_conf() then
			console('this is not a ' .. myorname .. ' project.')
			return
		end
	end

	if action ~= 'help' and action ~= 'version' and action ~= 'get_start_cmd' and not env.indocker then
		log_base_info()
	end

	_M[action](arg[2])

	if action ~= 'help' and action ~= 'version' and action ~= 'get_start_cmd' and not env.indocker then
		console('Completed')
	end
end
